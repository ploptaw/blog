var $aJ0Lc$linkedom = require("linkedom");
var $aJ0Lc$11tyeleventycacheassets = require("@11ty/eleventy-cache-assets");
var $aJ0Lc$prismjs = require("prismjs");
var $aJ0Lc$prismjscomponents = require("prismjs/components/");

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}




const $f6bd1e4bcc8c99dd$var$DEFAULT_URL_THEME = 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.19.0/themes/prism-tomorrow.min.css';
const $f6bd1e4bcc8c99dd$export$1537643e85439bf5 = async (content, url = $f6bd1e4bcc8c99dd$var$DEFAULT_URL_THEME)=>{
    const { document: document  } = $aJ0Lc$linkedom.parseHTML(content);
    const head = document.getElementsByTagName('head')[0];
    const codedSections = [
        ...document.querySelectorAll('pre > code')
    ];
    if (codedSections.length > 0) {
        const css = await ($parcel$interopDefault($aJ0Lc$11tyeleventycacheassets))(url, {
            duration: '1h',
            type: 'text'
        });
        const inline = document.createElement('style');
        const inlinStyle = document.createTextNode(`/*! purgecss start ignore */ ${css} /*! purgecss end ignore */`);
        inline.appendChild(inlinStyle);
        head.appendChild(inline);
        codedSections.map((section)=>{
            const languages = [];
            const language = section.className.split('-')[1];
            if (language) {
                languages.push(language);
                ($parcel$interopDefault($aJ0Lc$prismjscomponents))(languages);
                const code = section.innerHTML;
                const html = ($parcel$interopDefault($aJ0Lc$prismjs)).highlight(code, ($parcel$interopDefault($aJ0Lc$prismjs)).languages[language], language);
                section.innerHTML = html;
                const pre = section.parentElement;
                pre.className = `${pre.className} language-${language}`;
                return section;
            }
        });
        content = document.toString();
    }
    return content;
};


module.exports = (eleventyConfig, options)=>{
    eleventyConfig.namespace('sardine-', ()=>{
        eleventyConfig.addTransform('code-highlighter', async (content, outputPath)=>{
            try {
                if (outputPath && outputPath.endsWith('.html')) content = await $f6bd1e4bcc8c99dd$export$1537643e85439bf5(content, options === null || options === void 0 ? void 0 : options.urlTheme);
            } catch (error) {
                console.error(error);
            }
            return content;
        });
    });
};


//# sourceMappingURL=index.js.map
