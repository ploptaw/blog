{"mappings":";;;;;;;;;;;;ACKA,KAAK,CAAC,uCAAiB,GAAG,CAAmF;AAEtG,KAAK,CAAC,yCAAW,UAAU,OAAe,EAAE,GAAG,GAAG,uCAAiB,GAAsB,CAAC;IAC/F,KAAK,CAAC,CAAC,WAAC,QAAQ,EAAC,CAAC,GAAG,yBAAS,CAAC,OAAO;IACtC,KAAK,CAAC,IAAI,GAAG,QAAQ,CAAC,oBAAoB,CAAC,CAAM,OAAE,CAAC;IAEpD,KAAK,CAAC,aAAa,GAAG,CAAC;WAAG,QAAQ,CAAC,gBAAgB,CAAC,CAAY;IAAC,CAAC;IAClE,EAAE,EAAE,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC7B,KAAK,CAAC,GAAG,GAAW,KAAK,CAAC,wDAAa,CAAC,GAAG,EAAE,CAAC;YAC5C,QAAQ,EAAE,CAAI;YACd,IAAI,EAAE,CAAM;QACd,CAAC;QAED,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAO;QAC7C,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,cAAc,EAAE,6BAA6B,EAAE,GAAG,CAAC,2BAA2B;QAC1G,MAAM,CAAC,WAAW,CAAC,UAAU;QAC7B,IAAI,CAAC,WAAW,CAAC,MAAM;QAEvB,aAAa,CAAC,GAAG,EAAE,OAAO,GAAK,CAAC;YAC9B,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC;YACpB,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAG,IAAE,CAAC;YAC/C,EAAE,EAAE,QAAQ,EAAE,CAAC;gBACb,SAAS,CAAC,IAAI,CAAC,QAAQ;gBACvB,kDAAa,CAAC,SAAS;gBACvB,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC,SAAS;gBAC9B,KAAK,CAAC,IAAI,GAAG,wCAAK,CAAC,SAAS,CAAC,IAAI,EAAE,wCAAK,CAAC,SAAS,CAAC,QAAQ,GAAG,QAAQ;gBACtE,OAAO,CAAC,SAAS,GAAG,IAAI;gBACxB,KAAK,CAAC,GAAG,GAAG,OAAO,CAAC,aAAa;gBACjC,GAAG,CAAC,SAAS,MAAM,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,QAAQ;gBACrD,MAAM,CAAC,OAAO;YAChB,CAAC;QACH,CAAC;QACD,OAAO,GAAG,QAAQ,CAAC,QAAQ;IAC7B,CAAC;IACD,MAAM,CAAC,OAAO;AAChB,CAAC;;;ADlCD,cAAc,IAAI,cAAmB,EAAE,OAA0B,GAAK,CAAC;IACrE,cAAc,CAAC,SAAS,CAAC,CAAU,eAAQ,CAAC;QAC1C,cAAc,CAAC,YAAY,CAAC,CAAkB,0BAAS,OAAe,EAAE,UAAkB,GAAK,CAAC;YAC9F,GAAG,CAAC,CAAC;gBACH,EAAE,EAAE,UAAU,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAO,SAC3C,OAAO,GAAG,KAAK,CAAC,yCAAW,CAAC,OAAO,EAAE,OAAO,aAAP,OAAO,KAAP,IAAI,CAAJ,CAAiB,GAAjB,IAAI,CAAJ,CAAiB,GAAjB,OAAO,CAAE,QAAQ;YAE1D,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,KAAK;YACrB,CAAC;YACD,MAAM,CAAC,OAAO;QAChB,CAAC;IACH,CAAC;AACH,CAAC","sources":["packages/code-highlighter/lib/.eleventy.ts","packages/code-highlighter/lib/highlighter.ts"],"sourcesContent":["import { highlighter } from './highlighter';\n\nexport interface OptionsInterface {\n  urlTheme?: string;\n}\n\nmodule.exports = (eleventyConfig: any, options?: OptionsInterface) => {\n  eleventyConfig.namespace('sardine-', () => {\n    eleventyConfig.addTransform('code-highlighter', async (content: string, outputPath: string) => {\n      try {\n        if (outputPath && outputPath.endsWith('.html')) {\n          content = await highlighter(content, options?.urlTheme);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n      return content;\n    });\n  });\n};\n","import { parseHTML } from 'linkedom';\nimport EleventyCache from '@11ty/eleventy-cache-assets';\nimport Prism from 'prismjs';\nimport loadLanguages from 'prismjs/components/';\n\nconst DEFAULT_URL_THEME = 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.19.0/themes/prism-tomorrow.min.css';\n\nexport const highlighter = async (content: string, url = DEFAULT_URL_THEME): Promise<string> => {\n  const { document } = parseHTML(content);\n  const head = document.getElementsByTagName('head')[0];\n\n  const codedSections = [...document.querySelectorAll('pre > code')];\n  if (codedSections.length > 0) {\n    const css: string = await EleventyCache(url, {\n      duration: '1h',\n      type: 'text',\n    });\n\n    const inline = document.createElement('style');\n    const inlinStyle = document.createTextNode(`/*! purgecss start ignore */ ${css} /*! purgecss end ignore */`);\n    inline.appendChild(inlinStyle);\n    head.appendChild(inline);\n\n    codedSections.map((section) => {\n      const languages = [];\n      const language = section.className.split('-')[1];\n      if (language) {\n        languages.push(language);\n        loadLanguages(languages);\n        const code = section.innerHTML;\n        const html = Prism.highlight(code, Prism.languages[language], language);\n        section.innerHTML = html;\n        const pre = section.parentElement as HTMLElement;\n        pre.className = `${pre.className} language-${language}`;\n        return section;\n      }\n    });\n    content = document.toString();\n  }\n  return content;\n};\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../../../"}